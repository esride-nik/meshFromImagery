import{a5 as m,a6 as s,a9 as u,ae as y,e4 as d,hg as h,hf as l,v as x}from"./index-b516d057.js";import{p as $}from"./Association-ad31be1b.js";import"./UtilityNetwork-8891cbdb.js";import"./FeatureLayer-c4c5819f.js";import"./jsonUtils-52514725.js";import"./DictionaryLoader-e327eff9.js";import"./Version-1f969b2a.js";import"./FieldsIndex-e8db657f.js";import"./UnknownTimeZone-a05df022.js";import"./HeatmapColorStop-3fff4333.js";import"./heatmapUtils-7f42325f.js";import"./FeatureLayerBase-0746b503.js";import"./HeightModelInfo-b816d32b.js";import"./featureLayerUtils-16361d1f.js";import"./featureQueryAll-40af0622.js";import"./Query-071039d7.js";import"./FullTextSearch-12e0754c.js";import"./QuantizationParameters-f983cf8d.js";import"./AttachmentQuery-bede5a71.js";import"./RelationshipQuery-2c9e4485.js";import"./LayerFloorInfo-4234db4d.js";import"./serviceCapabilitiesUtils-42d4d20c.js";import"./editsZScale-e45bb69c.js";import"./queryZScale-d7a48772.js";import"./APIKeyMixin-bfb00271.js";import"./EditBusLayer-caf9fed8.js";import"./uuid-709b6c67.js";import"./FeatureEffectLayer-1948d1a0.js";import"./FeatureEffect-c80bb16d.js";import"./FeatureFilter-55dd341e.js";import"./FeatureReductionLayer-443167bc.js";import"./clusterUtils-50a66940.js";import"./MD5-715f37cd.js";import"./FeatureReductionSelection-d84c375a.js";import"./LabelClass-c3c309a8.js";import"./labelUtils-b29175f3.js";import"./defaults-4faa92e6.js";import"./defaultsJSON-59981e75.js";import"./OrderedLayer-32293fe1.js";import"./FeatureTemplate-d1d1c7be.js";import"./FeatureType-f30c4b8b.js";import"./fieldProperties-8c831c84.js";import"./labelingInfo-aae625ac.js";import"./versionUtils-5892620e.js";import"./styleUtils-a3d96bf6.js";import"./TopFeaturesQuery-6d0bf5f5.js";let p=class extends y{constructor(t){super(t),this.maxGeometryCountExceeded=!1,this.associations=[]}};m([s({type:Boolean,json:{write:!0}})],p.prototype,"maxGeometryCountExceeded",void 0),m([s({type:[$],json:{write:!0}})],p.prototype,"associations",void 0),p=m([u("esri.rest.networks.support.AssociationGeometriesResult")],p);const G=p;async function yo(t,i,o){const r=d(t),e={...i.toJSON(),f:"json"},a=h({...r.query,...e});o?o.method="post":o={method:"post"};const n=l(a,o),c=`${r.path}/synthesizeAssociationGeometries`;return x(c,n).then(f=>j(f,i.outSpatialReference))}function j(t,i){const{data:o}=t,r=G.fromJSON(o);if(i)for(const e of r.associations)e.geometry.spatialReference=i.clone();return r}export{yo as synthesizeAssociationGeometries};
