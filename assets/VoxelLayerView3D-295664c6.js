import{s as c,bm as W,cb as l,h3 as T,cv as E,ah as x,et as A,fC as I,fv as M,f6 as L,an as V,a5 as y,a6 as _,a9 as D,aW as f}from"./index-b516d057.js";import{t as P}from"./projectVectorToVector-56c29b20.js";import{n as F}from"./LayerView3D-c03d44fc.js";import{Y as $,Z as o,$ as w}from"./SceneView-123ac862.js";import{i as C}from"./PopupSceneLayerView-3bc58223.js";import{u as R}from"./LayerView-060b46d4.js";import"./heightModelInfoUtils-0dd2b6e4.js";import"./HeightModelInfo-b816d32b.js";import"./Viewpoint-f83262d0.js";import"./Cyclical-4c223a04.js";import"./jsxFactory-92036771.js";import"./uuid-709b6c67.js";import"./ElevationQuery-a3eaf0a0.js";import"./RenderGeometry-5dbc1699.js";import"./vec3f32-bac7ea57.js";import"./DefaultTechniqueConfiguration-b4dbe32f.js";import"./requestImageUtils-b142708c.js";import"./enums-bdecffa2.js";import"./Texture-bcb6d63f.js";import"./contextUtils-81fda295.js";import"./interfaces-8918b36f.js";import"./Material-5f4156ac.js";import"./ViewingMode-5d7d590b.js";import"./FramebufferObject-123b7c8d.js";import"./ShaderTechniqueConfiguration-2502462e.js";import"./ElevationProvider-abb53936.js";import"./dehydratedPoint-5a1dfed5.js";import"./hydratedFeatures-2365c307.js";import"./weather-2eb64924.js";import"./RenderState-1d6218ee.js";import"./NestedMap-1b5db22e.js";import"./frustum-f9d53cdf.js";import"./VertexElementDescriptor-2925c6af.js";import"./VertexArrayObject-d19dab8d.js";import"./Octree-7cea9440.js";import"./InterleavedLayout-d76b0d59.js";import"./types-1305598a.js";import"./OrderIndependentTransparency-755f7dcc.js";import"./floatRGBA-ca990bbb.js";import"./Intersector-2e1d9db3.js";import"./Intersector-fa865806.js";import"./boundedPlane-1da2f094.js";import"./verticalOffsetUtils-e5214af9.js";import"./orientedBoundingBox-67c5cd22.js";import"./glUtil-ce5ee52b.js";import"./Scheduler-ff5943a4.js";import"./signal-51ed66f5.js";import"./debugFlags-9a30f077.js";import"./vec2f32-eaf29605.js";import"./ColorMaterial-bdf1f62a.js";import"./VerticalOffset.glsl-5743f98e.js";import"./dehydratedFeatures-2a3f0608.js";import"./quantizationUtils-17105106.js";import"./featureConversionUtils-09cf00ff.js";import"./OptimizedFeature-e90b69df.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./OptimizedGeometry-196224d4.js";import"./edgeUtils-6e4a97fb.js";import"./SnappingCandidate-970faec6.js";import"./objectResourceUtils-003803db.js";import"./devEnvironmentUtils-4eab2a99.js";import"./DefaultMaterial_COLOR_GAMMA-101ea40c.js";import"./Version-1f969b2a.js";import"./resourceUtils-1d03d2fe.js";import"./mat3f32-6c416b1c.js";import"./symbolColorUtils-3ca646c8.js";import"./callExpressionWithFeature-36423058.js";import"./lineStippleUtils-0688e06c.js";import"./projectVectorToDehydratedPoint-e30a7ff8.js";import"./interfaces-1a80c8eb.js";import"./webStyleSymbolUtils-4761c8f2.js";import"./Intersector-a291e778.js";import"./fontUtils-56b88a2f.js";import"./coordinateSystem-38339d17.js";import"./scaleUtils-72744379.js";import"./LayerConstants-d3ac1b7a.js";import"./DefaultUI-af7068c2.js";import"./UpdatingHandles-7949a657.js";import"./screenUtils-8dc4a7f9.js";import"./Map-1ad4186f.js";import"./Basemap-8d62c69e.js";import"./loadAll-5e767cfa.js";import"./writeUtils-e226a8aa.js";import"./Ground-ed93a93a.js";import"./CollectionFlattener-193451da.js";import"./editableLayers-856f2cb4.js";import"./basemapUtils-6ec10a55.js";import"./TablesMixin-292d1d89.js";import"./IViewEvents-9a85f53d.js";import"./interfaces-0421c5e6.js";import"./mat2d-d4af8487.js";import"./mat2df32-fb26a8c9.js";import"./mat2df64-4d1a9198.js";import"./capabilities-9d56a1da.js";import"./themeUtils-7dcf5b71.js";import"./globalCss-94006b67.js";import"./accessibleHandler-e91101b2.js";import"./Compass-b37d7d1d.js";import"./GoTo-4d856ce0.js";import"./NavigationToggle-57c00adb.js";import"./Zoom-73b5f25a.js";import"./resources-d4afed0c.js";import"./viewpointUtils-245ed782.js";import"./projectPointToVectorWithEngine-f608a34a.js";import"./projectVectorToPoint-fbaf5599.js";import"./earthUtils-ef4b5643.js";import"./spatialReferenceSupport-5aeb751c.js";import"./ElevationSamplerData-9f34f589.js";import"./terrainUtils-b6b761ab.js";import"./Environment-91bfea7d.js";import"./projectPointToWGS84ComparableLonLat-1ba40d40.js";import"./projectVectorToWGS84ComparableLonLat-5675a9f4.js";import"./ShadowCastVisualizeTechniqueConfiguration-4fcc4e25.js";import"./ray-8da55042.js";import"./ZoomMomentumEstimator-7437d26a.js";import"./labelFormatUtils-d440367f.js";import"./labelUtils-b29175f3.js";import"./FeatureTileDescriptor3D-27dbeac7.js";import"./geometryServiceUtils-3e048225.js";import"./project-1bd91657.js";import"./RenderCoordsHelper-8f237859.js";import"./intersectorUtilsConversions-d05d75a3.js";import"./LercDecoder-b49c0e9c.js";import"./WorkerHandle-9433ab9a.js";import"./RenderableTile-52f61d09.js";import"./enums-fb086c25.js";import"./config-1337d16e.js";import"./TiledDisplayObject-e7d105ae.js";import"./DisplayObject-9a6e3923.js";import"./TileKey-4b1303ff.js";import"./rasterUtils-15abcc11.js";import"./TileInfoView-ce4d65fb.js";import"./TileStrategy-a729431f.js";import"./QueueProcessor-4b9d43d3.js";import"./StyleDefinition-29c49b98.js";import"./enums-f1a6a48a.js";import"./edgeProcessing-82213448.js";import"./resources-15104e7a.js";import"./EdgeWorkerHandle-7d97defa.js";import"./workerHelper-d1cc0cda.js";import"./testSVGPremultipliedAlpha-f5e92e14.js";import"./DefaultVertexAttributeLayouts-8962d8eb.js";import"./RenderingContext-c0ea7a49.js";import"./ProgramCache-891c4b8d.js";import"./Program-96bc94ed.js";import"./hitTestSelectUtils-d512707e.js";import"./layerViewUtils-6ebe90f4.js";import"./popupUtils-e4ebc84a.js";var s;(function(e){e[e.API=1]="API",e[e.VerboseAPI=2]="VerboseAPI",e[e.Error=3]="Error"})(s||(s={}));const n=f(),S=f();let h=class extends C(F(R)){constructor(){super(...arguments),this._suspendedHandle=null,this._usedMemory=0,this._futureMemory=0,this.type="voxel-3d",this.slicePlaneEnabled=!1,this._wasmLayerId=-1,this.ignoresMemoryFactor=!0,this._dbgFlags=new Set}get baseUrl(){var e;return((e=this.layer.parsedUrl)==null?void 0:e.path)??""}get wasmLayerId(){return this._wasmLayerId}initialize(){var d;if(this._dbgFlags.add(s.Error),this.view.viewingMode!=="local")throw new c("voxel:unsupported-viewingMode","Voxel layers support local viewingMode only.",{});if(!((d=this.view._stage.renderView.renderingContext.capabilities.colorBufferFloat)!=null&&d.textureFloat))throw new c("voxel:missing-color-buffer-float","Voxel layers require the WebGL2 extension EXT_color_buffer_float",{});const e=this.layer.spatialReference;if(!W(e,this.view.spatialReference))throw new c("layerview:spatial-reference-incompatible","The spatial reference of this scene layer is incompatible with the spatial reference of the view",{});const t=this.layer.currentVariableId,r=this.layer.getVolume(t),a=this.layer.getVariable(t);if(r!=null&&a!=null){const p=r.dimensions[0],i=r.dimensions[1],u=r.zDimension;if(u>1){const g=r.dimensions[u],v=p.size*i.size*g.size;let b=1;switch(a.renderingFormat.type){case"Int16":case"UInt16":b=2;break;case"Int32":case"UInt32":case"Float32":b=4}this._futureMemory=b*v}}const m=$(this).then(p=>{this._wasmLayerId=p,this._suspendedHandle=l(()=>this.suspended,i=>{const u=o(this.view);u&&u.setEnabled(this,!i)},T),this.addHandles([l(()=>this.layer.renderMode,i=>this._pushRenderModeToWasm(i)),l(()=>this.layer.currentVariableId,i=>this._pushCurrentVariableIdToWasm(i)),l(()=>this.layer.getSections(),i=>this._pushSectionsToWasm(i)),l(()=>this.layer.getVariableStyles(),i=>this._pushVariableStylesToWasm(i)),l(()=>this.layer.getVolumeStyles(),i=>this._pushVolumeStylesToWasm(i)),l(()=>this.layer.enableDynamicSections,i=>this._pushEnableDynamicSectionsToWasm(i)),l(()=>this.layer.enableIsosurfaces,i=>this._pushEnableIsosurfacesToWasm(i)),l(()=>this.layer.enableSections,i=>this._pushEnableSectionsToWasm(i)),l(()=>this.layer.enableSlices,i=>this._pushEnableSlicesToWasm(i)),l(()=>this.slicePlaneEnabled,i=>this._pushAnalysisSliceToWasm(i,this.view.slicePlane)),l(()=>this.view.slicePlane,i=>this._pushAnalysisSliceToWasm(this.slicePlaneEnabled,i))])}).catch(p=>{if(w(this),this._wasmLayerId=-1,p===-1)throw new c("voxel:addLayer-failure","The voxel layer description was invalid.",{});if(p===-2)throw new c("voxel:addLayer-failure","The voxel layer web assembly module failed to download.",{})});this.addResolvingPromise(m)}destroy(){w(this),this._suspendedHandle&&(this._suspendedHandle.remove(),this._suspendedHandle=null)}isUpdating(){const e=o(this.view);return!(this._wasmLayerId<0||e==null)&&e.isUpdating(this._wasmLayerId)}updatingFlagChanged(){this.notifyChange("updating")}get usedMemory(){return this._usedMemory}get unloadedMemory(){return this._futureMemory}get performanceInfo(){return{nodes:0,displayedNumberOfFeatures:0,maximumNumberOfFeatures:0,totalNumberOfFeatures:0,core:null}}whenGraphicBounds(e,t){const r=e.attributes["Voxel.WorldPosition"];if(r){const a=E(),m=JSON.parse(r);if(P(m,this.view.renderSpatialReference,S,this.view.spatialReference||x.WGS84))return A(a,S),Promise.resolve({boundingBox:a,screenSpaceObjects:[]})}return Promise.reject()}setUsedMemory(e){this._usedMemory=e,this._futureMemory=0}captureFrustum(){const e=o(this.view);e==null||e.captureFrustum()}toggleFullVolumeExtentDraw(){const e=o(this.view);e==null||e.toggleFullVolumeExtentDraw(this)}getLayerTimes(){const e=o(this.view);return(e==null?void 0:e.getLayerTimes(this))??[]}getCurrentLayerTimeIndex(){const e=o(this.view);return(e==null?void 0:e.getCurrentLayerTimeIndex(this))??0}_pushRenderModeToWasm(e){const t=o(this.view);this._dbg(s.VerboseAPI,"VoxelLayerView3D._pushRenderModeToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setRenderMode(this,e)||this._dbg(s.Error,"VoxelLayerView3D._pushRenderModeToWasm() failed!")}_pushSectionsToWasm(e){const t=o(this.view);this._dbg(s.VerboseAPI,"VoxelLayerView3D._pushSectionsToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setStaticSections(this,e)||this._dbg(s.Error,"VoxelLayerView3D._pushSectionsToWasm() failed!")}_pushCurrentVariableIdToWasm(e){const t=o(this.view);this._dbg(s.VerboseAPI,"VoxelLayerView3D._pushCurrentVariableIdToWasm() called!, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setCurrentVariable(this,e)||this._dbg(s.Error,"VoxelLayerView3D._pushCurrentVariableIdToWasm() failed!")}_pushVariableStylesToWasm(e){const t=o(this.view);this._dbg(s.VerboseAPI,"VoxelLayerView3D._pushVariableStylesToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setVariableStyles(this,e)||this._dbg(s.Error,"VoxelLayerView3D._pushVariableStylesToWasm() failed!")}_accountForEnableSlices(e,t){const r=t??this.layer.enableSlices;for(let a=0;a<e.length;++a){const m=e[a];for(const d of m.slices)d.enabled=d.enabled&&r}}_pushVolumeStylesToWasm(e){const t=o(this.view);this._dbg(s.VerboseAPI,"VoxelLayerView3D._pushVolumeStylesToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t&&(this._accountForEnableSlices(e,null),t.setVolumeStyles(this,e)||this._dbg(s.Error,"VoxelLayerView3D._pushVolumeStylesToWasm() failed!"))}_pushAnalysisSliceToWasm(e,t){const r=o(this.view);this._dbg(s.VerboseAPI,"VoxelLayerView3D._pushAnalysisSliceToWasm() called, "+(r?"have WASM":"don't have WASM!!!"));let a=!1;if(r){if(t){const m=t.origin;I(n,t.basis1,t.basis2),M(n,n),a=r.setAnalysisSlice(this,e,m,n)}else L(n,0,0,1),a=r.setAnalysisSlice(this,!1,n,n);a||this._dbg(s.Error,"VoxelLayerView3D._pushAnalysisSliceToWasm() failed!")}}_pushEnableDynamicSectionsToWasm(e){const t=o(this.view);this._dbg(s.VerboseAPI,"VoxelLayerView3D._pushEnableDynamicSectionsToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setEnableDynamicSections(this,e)||this._dbg(s.Error,"VoxelLayerView3D._pushEnableDynamicSectionsToWasm() failed!")}_pushEnableSlicesToWasm(e){const t=o(this.view);if(this._dbg(s.VerboseAPI,"VoxelLayerView3D._pushEnableSlicesToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t){const r=this.layer.getVolumeStyles();this._accountForEnableSlices(r,e),t.setVolumeStyles(this,r)||this._dbg(s.Error,"VoxelLayerView3D._pushEnableSlicesToWasm() failed!")}}_pushEnableIsosurfacesToWasm(e){const t=o(this.view);this._dbg(s.VerboseAPI,"VoxelLayerView3D._pushEnableIsosurfacesToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setEnableIsosurfaces(this,e)||this._dbg(s.Error,"VoxelLayerView3D._pushEnableIsosurfacesToWasm() failed!")}_pushEnableSectionsToWasm(e){const t=o(this.view);this._dbg(s.VerboseAPI,"VoxelLayerView3D._pushEnableSectionsToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setEnableSections(this,e)||this._dbg(s.Error,"VoxelLayerView3D._pushEnableSectionsToWasm() failed!")}async whenGraphicAttributes(e,t){return e}_dbg(e,t){this._dbgFlags.has(e)&&(e===s.Error?V.getLogger(this).error(t):V.getLogger(this).warn(t))}};y([_()],h.prototype,"layer",void 0),y([_()],h.prototype,"baseUrl",null),y([_({type:Boolean})],h.prototype,"slicePlaneEnabled",void 0),h=y([D("esri.views.3d.layers.VoxelLayerView3D")],h);const Wi=h;export{Wi as default};
