import{a5 as e,a6 as u,a9 as l,ae as d,e4 as f,hg as y,hf as $,v as g}from"./index-b516d057.js";import{e as S}from"./UtilityNetwork-8891cbdb.js";import{p as I}from"./Association-ad31be1b.js";import"./FeatureLayer-c4c5819f.js";import"./jsonUtils-52514725.js";import"./DictionaryLoader-e327eff9.js";import"./Version-1f969b2a.js";import"./FieldsIndex-e8db657f.js";import"./UnknownTimeZone-a05df022.js";import"./HeatmapColorStop-3fff4333.js";import"./heatmapUtils-7f42325f.js";import"./FeatureLayerBase-0746b503.js";import"./HeightModelInfo-b816d32b.js";import"./featureLayerUtils-16361d1f.js";import"./featureQueryAll-40af0622.js";import"./Query-071039d7.js";import"./FullTextSearch-12e0754c.js";import"./QuantizationParameters-f983cf8d.js";import"./AttachmentQuery-bede5a71.js";import"./RelationshipQuery-2c9e4485.js";import"./LayerFloorInfo-4234db4d.js";import"./serviceCapabilitiesUtils-42d4d20c.js";import"./editsZScale-e45bb69c.js";import"./queryZScale-d7a48772.js";import"./APIKeyMixin-bfb00271.js";import"./EditBusLayer-caf9fed8.js";import"./uuid-709b6c67.js";import"./FeatureEffectLayer-1948d1a0.js";import"./FeatureEffect-c80bb16d.js";import"./FeatureFilter-55dd341e.js";import"./FeatureReductionLayer-443167bc.js";import"./clusterUtils-50a66940.js";import"./MD5-715f37cd.js";import"./FeatureReductionSelection-d84c375a.js";import"./LabelClass-c3c309a8.js";import"./labelUtils-b29175f3.js";import"./defaults-4faa92e6.js";import"./defaultsJSON-59981e75.js";import"./OrderedLayer-32293fe1.js";import"./FeatureTemplate-d1d1c7be.js";import"./FeatureType-f30c4b8b.js";import"./fieldProperties-8c831c84.js";import"./labelingInfo-aae625ac.js";import"./versionUtils-5892620e.js";import"./styleUtils-a3d96bf6.js";import"./TopFeaturesQuery-6d0bf5f5.js";let i=class extends d{constructor(o){super(o),this.associations=[]}};e([u({type:[I],json:{write:!0}})],i.prototype,"associations",void 0),i=e([l("esri.rest.networks.support.QueryAssociationsResult")],i);const h=i;function w(o){const{returnDeletes:m,elements:p,gdbVersion:r,moment:s}=o.toJSON();return{returnDeletes:m,elements:JSON.stringify(p.map(t=>({globalId:t.globalId,networkSourceId:t.networkSourceId,terminalId:t.terminalId}))),types:JSON.stringify(o.types.map(t=>S.toJSON(t))),gdbVersion:r,moment:s}}async function ft(o,m,p){const r=f(o),s={...w(m),f:"json"},t=y({...r.query,...s}),a=$(t,{...p,method:"post"}),n=`${r.path}/associations/query`,{data:c}=await g(n,a);return h.fromJSON(c)}export{ft as queryAssociations};
