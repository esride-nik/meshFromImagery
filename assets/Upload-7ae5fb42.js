import{bA as _,cn as g,y as c,_ as v,B as T,s as k,a5 as l,a6 as a,a9 as w,bn as F,it as E,iu as P}from"./index-b516d057.js";import{i as $,e as b,h as x}from"./progressUtils-874eb29d.js";let o=class extends _{constructor(){super({}),this.files=[],this.progress=0,this._uploadTask=null,this._layer=null}destroy(){this.cancel(),this.files=[],this._layer=null,this._uploadTask=null}get state(){const e=this._uploadTask;return e&&this.files.length!==0?e.finished?e.error?"error":"success":"pending":"default"}get result(){var e;return((e=this._uploadTask)==null?void 0:e.value)??null}get error(){var e;return((e=this._uploadTask)==null?void 0:e.error)??null}uploadTo(e){this.cancel(),this.files=[],this._layer=e,this._uploadTask=g(async s=>{const r=await A(e);c(s),this.progress=0,this.files=r;const t=$(b.upload,n=>{this.progress=n},"Upload.uploadTo");if(r.length===0)return null;const{default:i}=await v(()=>import("./index-b516d057.js").then(n=>n.uD),["assets/index-b516d057.js","assets/index-b252abd2.css"]);c(s);const p=await i.extractAndFilterFiles(r,e);c(s),p.length>0&&(this.files=p);const h=new T({x:0,y:0,z:0,spatialReference:e.spatialReference}),d=await i.createFromFiles(h,p,{layer:e,signal:s,onProgress:t.makeOnProgress("createFromFiles")});if(c(s),!d)throw new k("editor:upload","could not upload or convert model");const f=p.reduce((n,m)=>n+m.size,0),y=t.simulate("loadMesh",x(f));try{await d.load()}finally{y.remove()}return d})}retry(){this._layer&&this.uploadTo(this._layer)}cancel(){var e;(e=this._uploadTask)==null||e.abort()}};l([a()],o.prototype,"files",void 0),l([a()],o.prototype,"progress",void 0),l([a()],o.prototype,"state",null),l([a()],o.prototype,"result",null),l([a()],o.prototype,"error",null),l([a()],o.prototype,"_uploadTask",void 0),l([a()],o.prototype,"_layer",void 0),o=l([w("esri.widgets.Editor.Upload")],o);let u=null;async function A(e){const{resolve:s,promise:r}=F(),t=document.createElement("input");t.type="file",t.multiple=!1,t.accept=[...E(e.infoFor3D),".zip"].join(","),t.style.display="none",document.body.appendChild(t);const i=P(t,"change",()=>s(t.files?Array.from(t.files):[]));return u?u(t):t.click(),r.finally(()=>{i.remove(),t.remove()})}function R(e){u=s=>{Promise.resolve().then(()=>e).then(r=>{if(!u)return;const t=new DataTransfer;r.forEach(i=>t.items.add(i)),s.files=t.files,s.dispatchEvent(new Event("change"))})}}function U(){u=null}export{o as Upload,U as clearPromptForFilesStub,R as stubFilePickerToSelect};
