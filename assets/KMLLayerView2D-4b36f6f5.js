import{di as k,B as T,kA as G,c_ as z,v as N,hE as D,V as O,cb as F,gj as W,b9 as S,M as A,eJ as H,ah as E,hi as J,kB as U,e4 as K,a4 as Y,a5 as v,a6 as C,a9 as Q}from"./index-b516d057.js";import{b as M,g as X,d as Z}from"./kmlUtils-7ddd5717.js";import{f as tt,w as it,b as et}from"./Bitmap-a6124485.js";import{a as rt}from"./BitmapContainer-de019d25.js";import{m as at}from"./LayerView2D-4970cda5.js";import{i as P}from"./GraphicContainer-1a5a19a4.js";import{r as R}from"./GraphicsView2D-59987375.js";import{u as ot}from"./LayerView-060b46d4.js";import{d as st}from"./WGLContainer-73827040.js";import{o as nt}from"./MaterialPrograms-ad74405b.js";import{D as $,G as pt,U as lt,X as j}from"./enums-bdecffa2.js";import{E as mt}from"./FramebufferObject-123b7c8d.js";import{m as ht}from"./rasterUtils-15abcc11.js";import{N as ct}from"./RenderingContext-c0ea7a49.js";import{e as L,T as dt}from"./Texture-bcb6d63f.js";import"./jsonUtils-52514725.js";import"./DictionaryLoader-e327eff9.js";import"./Version-1f969b2a.js";import"./FieldsIndex-e8db657f.js";import"./UnknownTimeZone-a05df022.js";import"./HeatmapColorStop-3fff4333.js";import"./heatmapUtils-7f42325f.js";import"./mat3f32-6c416b1c.js";import"./vec2f32-eaf29605.js";import"./DisplayObject-9a6e3923.js";import"./contextUtils-81fda295.js";import"./enums-b1d611e3.js";import"./scaleUtils-72744379.js";import"./Container-1d2d049f.js";import"./EffectView-b2b90b02.js";import"./definitions-5366d472.js";import"./MapView-feaca8e4.js";import"./Viewpoint-f83262d0.js";import"./Cyclical-4c223a04.js";import"./CollectionFlattener-193451da.js";import"./DefaultUI-af7068c2.js";import"./jsxFactory-92036771.js";import"./uuid-709b6c67.js";import"./UpdatingHandles-7949a657.js";import"./screenUtils-8dc4a7f9.js";import"./signal-51ed66f5.js";import"./Map-1ad4186f.js";import"./Basemap-8d62c69e.js";import"./loadAll-5e767cfa.js";import"./writeUtils-e226a8aa.js";import"./Ground-ed93a93a.js";import"./editableLayers-856f2cb4.js";import"./basemapUtils-6ec10a55.js";import"./TablesMixin-292d1d89.js";import"./HeightModelInfo-b816d32b.js";import"./IViewEvents-9a85f53d.js";import"./interfaces-0421c5e6.js";import"./heightModelInfoUtils-0dd2b6e4.js";import"./ViewingMode-5d7d590b.js";import"./mat2d-d4af8487.js";import"./mat2df32-fb26a8c9.js";import"./mat2df64-4d1a9198.js";import"./capabilities-9d56a1da.js";import"./themeUtils-7dcf5b71.js";import"./globalCss-94006b67.js";import"./accessibleHandler-e91101b2.js";import"./Compass-b37d7d1d.js";import"./GoTo-4d856ce0.js";import"./NavigationToggle-57c00adb.js";import"./Zoom-73b5f25a.js";import"./resources-d4afed0c.js";import"./unitBezier-881ac1eb.js";import"./TileInfoView-ce4d65fb.js";import"./TileKey-4b1303ff.js";import"./TileStrategy-a729431f.js";import"./QueueProcessor-4b9d43d3.js";import"./TileStore-c31b905a.js";import"./quickselect-bc0541de.js";import"./QuantizationParameters-f983cf8d.js";import"./ColorBackground-5c13202f.js";import"./ClipRect-9f8fe7eb.js";import"./BaseGraphicContainer-4835aeec.js";import"./FeatureContainer-57c36de3.js";import"./AttributeStoreView-e5fce3c6.js";import"./TiledDisplayObject-e7d105ae.js";import"./labelingInfo-aae625ac.js";import"./LabelClass-c3c309a8.js";import"./labelUtils-b29175f3.js";import"./defaults-4faa92e6.js";import"./defaultsJSON-59981e75.js";import"./color-a1c19855.js";import"./enums-f1a6a48a.js";import"./VertexElementDescriptor-2925c6af.js";import"./number-e491b09e.js";import"./visualVariablesUtils-b310591f.js";import"./createSymbolSchema-001203d9.js";import"./cimAnalyzer-ce1886a0.js";import"./fontUtils-56b88a2f.js";import"./BidiEngine-9a40f2f4.js";import"./labelPoint-96433514.js";import"./OptimizedGeometry-196224d4.js";import"./GeometryUtils-984e8446.js";import"./alignmentUtils-ae955d28.js";import"./Rect-ea14f53a.js";import"./callExpressionWithFeature-36423058.js";import"./quantizationUtils-17105106.js";import"./floatRGBA-ca990bbb.js";import"./MaterialKey-96278cae.js";import"./ExpandedCIM-76245323.js";import"./clusterUtils-50a66940.js";import"./MD5-715f37cd.js";import"./util-8b594274.js";import"./TileContainer-8209da9f.js";import"./vec3f32-bac7ea57.js";import"./VertexArrayObject-d19dab8d.js";import"./normalizeUtilsSync-7ead5aec.js";import"./projectionSupport-dcf335fc.js";import"./json-48e3ea08.js";import"./Matcher-fcb8339d.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-a90259bc.js";import"./GeometryUtils-dd03fc25.js";import"./ComputedAttributeStorage-bbcde1eb.js";import"./featureConversionUtils-09cf00ff.js";import"./OptimizedFeature-e90b69df.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./TimeOnly-879c5107.js";import"./WGLBrushVTLSymbol-00207292.js";import"./vec4f32-0d1b2306.js";import"./StyleDefinition-29c49b98.js";import"./config-1337d16e.js";import"./ShaderCompiler-77d0dcb6.js";import"./ProgramTemplate-611fcbef.js";import"./Program-96bc94ed.js";import"./heatmapTextureUtils-6877589a.js";import"./DefaultVertexAttributeLayouts-8962d8eb.js";import"./programUtils-f035fe8a.js";import"./ProgramCache-891c4b8d.js";import"./NestedMap-1b5db22e.js";import"./OrderIndependentTransparency-755f7dcc.js";import"./interfaces-8918b36f.js";import"./testSVGPremultipliedAlpha-f5e92e14.js";class m{constructor(t){if(this._ownsRctx=!1,t)this._ownsRctx=!1,this._rctx=t;else{if(m._instance)return m._instanceRefCount++,m._instance;m._instanceRefCount=1,m._instance=this,this._ownsRctx=!0;const i=document.createElement("canvas").getContext("webgl");i.getExtension("OES_texture_float"),this._rctx=new ct(i,{})}const r={applyProjection:!0,bilinear:!1,bicubic:!1},o=nt("raster/reproject","raster/reproject",new Map([["a_position",0]]),r);this._program=this._rctx.programCache.acquire(o.shaders.vertexShader,o.shaders.fragmentShader,o.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new st(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,r,o=!1){const i=k(t.extent,r),a=new T({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:s,y:l}=G(a,r,t.extent);let n=(s+l)/2;const p=Math.round((i.xmax-i.xmin)/n),u=Math.round((i.ymax-i.ymin)/n);n=(i.width/p+i.height/u)/2;const I=new T({x:n,y:n,spatialReference:i.spatialReference}),g=z({projectedExtent:i,srcBufferExtent:t.extent,pixelSize:I,hasWrapAround:!0,spacing:[16,16]}),w=ht(this._rctx,g),y=new L(p,u);y.wrapMode=$.CLAMP_TO_EDGE;const h=new mt(this._rctx,y);this._rctx.bindFramebuffer(h),this._rctx.setViewport(0,0,p,u),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(w,1),this._quad.bind();const{width:x=0,height:f=0}=t.texture.descriptor;if(this._program.setUniform2f("u_srcImageSize",x,f),this._program.setUniform2fv("u_transformSpacing",g.spacing),this._program.setUniform2fv("u_transformGridSize",g.size),this._program.setUniform2f("u_targetImageSize",p,u),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),w.dispose(),o){const{width:c,height:V}=h,_=new ImageData(c??0,V??0);h.readPixels(0,0,c??0,V??0,pt.RGBA,lt.UNSIGNED_BYTE,_.data);const B=h.detachColorTexture(j.COLOR_ATTACHMENT0);return h.dispose(),{texture:B,extent:i,imageData:_}}const b=h.detachColorTexture(j.COLOR_ATTACHMENT0);return h.dispose(),{texture:b,extent:i}}reprojectBitmapData(t,r){const o=tt(t.bitmapData)?it(t.bitmapData):t.bitmapData,i=new L;i.wrapMode=$.CLAMP_TO_EDGE,i.width=t.bitmapData.width,i.height=t.bitmapData.height;const a=new dt(this._rctx,i,o),s=this.reprojectTexture({texture:a,extent:t.extent},r,!0);s.texture.dispose();const l=document.createElement("canvas"),n=s.imageData;return l.width=n.width,l.height=n.height,l.getContext("2d").putImageData(n,0,0),{bitmapData:l,extent:s.extent}}async loadAndReprojectBitmapData(t,r,o){const i=(await N(t,{responseType:"image"})).data,a=document.createElement("canvas");a.width=i.width,a.height=i.height;const s=a.getContext("2d");s.drawImage(i,0,0);const l=s.getImageData(0,0,a.width,a.height);if(r.spatialReference.equals(o))return{bitmapData:l,extent:r};const n=this.reprojectBitmapData({bitmapData:l,extent:r},o);return{bitmapData:n.bitmapData,extent:n.extent}}destroy(){this._ownsRctx?(m._instanceRefCount--,m._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),m._instance=null)):(this._quad.dispose(),this._program.dispose())}}m._instanceRefCount=0;class q{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let d=class extends at(ot){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new rt,this._kmlVisualData=new q,this._fetchController=null,this.allVisiblePoints=new D,this.allVisiblePolylines=new D,this.allVisiblePolygons=new D,this.allVisibleMapImages=new O}async hitTest(e,t){var o,i,a;const r=this.layer;return[(o=this._pointsView)==null?void 0:o.hitTest(e),(i=this._polylinesView)==null?void 0:i.hitTest(e),(a=this._polygonsView)==null?void 0:a.hitTest(e)].flat().filter(Boolean).map(s=>(s.layer=r,s.sourceLayer=r,{type:"graphic",graphic:s,layer:r,mapPoint:e}))}update(e){this._polygonsView&&this._polygonsView.processUpdate(e),this._polylinesView&&this._polylinesView.processUpdate(e),this._pointsView&&this._pointsView.processUpdate(e)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new R({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new P(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new R({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new P(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new R({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new P(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",e=>{e.added.forEach(t=>this._addMapImage(t)),e.removed.forEach(t=>this._removeMapImage(t))}),F(()=>this.layer.visibleSublayers,e=>{for(const[t,r]of this._kmlVisualData.allSublayers)r.visibility=0;for(const t of e){const r=this._kmlVisualData.allSublayers.get(t.id);r&&(r.visibility=1)}this._refreshCollections()})]),this._updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new m}detach(){this._fetchController=W(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=S(this._polygonsView),this._polylinesView=S(this._polylinesView),this._pointsView=S(this._pointsView),this._imageReprojector=S(this._imageReprojector)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(e){var t,r;((t=this.view.spatialReference)!=null&&t.isWGS84||(r=this.view.spatialReference)!=null&&r.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(e.href,A.fromJSON(e.extent),this.view.spatialReference).then(o=>{const i=new et(o.bitmapData);i.x=o.extent.xmin,i.y=o.extent.ymax,i.resolution=o.extent.width/o.bitmapData.width,i.rotation=e.rotation,this._mapImageContainer.addChild(i),this._bitmapIndex.set(e,i)})}async _getViewDependentUrl(e,t){const{viewFormat:r,viewBoundScale:o,httpQuery:i}=e;if(r!=null){if(t==null)throw new Error("Loading this network link requires a view state.");let a;if(await H(),o!=null&&o!==1){const c=new A(t.extent);c.expand(o),a=c}else a=t.extent;a=k(a,E.WGS84);const s=k(a,E.WebMercator),l=a.xmin,n=a.xmax,p=a.ymin,u=a.ymax,I=t.size[0]*t.pixelRatio,g=t.size[1]*t.pixelRatio,w=Math.max(s.width,s.height),y={"[bboxWest]":l.toString(),"[bboxEast]":n.toString(),"[bboxSouth]":p.toString(),"[bboxNorth]":u.toString(),"[lookatLon]":a.center.x.toString(),"[lookatLat]":a.center.y.toString(),"[lookatRange]":w.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":a.center.x.toString(),"[lookatTerrainLat]":a.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":a.center.x.toString(),"[cameraLat]":a.center.y.toString(),"[cameraAlt]":w.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":I.toString(),"[vertPixels]":g.toString(),"[terrainEnabled]":"0","[clientVersion]":J,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},h=c=>{for(const V in c){let _;for(_ in y)c[V]=c[V].replace(_,y[_])}},x=U(r);h(x);let f={};i!=null&&(f=U(i),h(f));const b=K(e.href);return b.query={...b.query,...x,...f},`${b.path}?${Y(x)}`}return e.href}async _fetchService(e){const t=new q;await this._loadVisualData(this.layer.url,t,e),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e))}_isSublayerVisible(e){const t=this._kmlVisualData.allSublayers.get(e);return!!(t!=null&&t.visibility)&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(e,t,r){return this._fetchParsedKML(e,r).then(async o=>{for(const i of o.sublayers){t.allSublayers.set(i.id,i);const a=i.points?await M(i.points):[],s=i.polylines?await M(i.polylines):[],l=i.polygons?await M(i.polygons):[],n=i.mapImages||[];if(t.allPoints.push(...a.map(p=>({item:p,sublayerId:i.id}))),t.allPolylines.push(...s.map(p=>({item:p,sublayerId:i.id}))),t.allPolygons.push(...l.map(p=>({item:p,sublayerId:i.id}))),t.allMapImages.push(...n.map(p=>({item:p,sublayerId:i.id}))),i.networkLink){const p=await this._getViewDependentUrl(i.networkLink,this.view.state);await this._loadVisualData(p,t,r)}}})}_fetchParsedKML(e,t){return X(e,this.layer.spatialReference,this.layer.refreshInterval,t).then(r=>Z(r.data))}_removeMapImage(e){const t=this._bitmapIndex.get(e);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(e))}};v([C()],d.prototype,"_pointsView",void 0),v([C()],d.prototype,"_polylinesView",void 0),v([C()],d.prototype,"_polygonsView",void 0),v([C()],d.prototype,"updating",void 0),d=v([Q("esri.views.2d.layers.KMLLayerView2D")],d);const Ne=d;export{Ne as default};
