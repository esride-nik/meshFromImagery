import{bB as f,bC as l,bD as c,bE as o,bF as p,bG as _,bH as b,bI as y,bJ as F,bK as m,bL as g,bM as w,bN as v,bO as E,bP as z,bQ as A,bR as T,bS as H,bT as I,bU as $,bV as M,bW as O,bX as V,bY as k,bZ as B,b_ as C,b$ as D,c0 as G,c1 as J,c2 as L,c3 as K,c4 as N,c5 as S,c6 as j,c7 as q,c8 as P,c9 as Q}from"./index-b516d057.js";import{e as u}from"./types-1305598a.js";class h{constructor(t,e){this.layout=t,this.buffer=typeof e=="number"?new ArrayBuffer(e*t.stride):e;for(const s of t.fields.keys()){const i=t.fields.get(s);this[s]=new i.constructor(this.buffer,i.offset,this.stride)}}get stride(){return this.layout.stride}get count(){return this.buffer.byteLength/this.stride}get byteLength(){return this.buffer.byteLength}getField(t,e){const s=this[t];return s&&s.elementCount===e.ElementCount&&s.elementType===e.ElementType?s:null}slice(t,e){return new h(this.layout,this.buffer.slice(t*this.stride,e*this.stride))}copyFrom(t,e=0,s=0,i=t.count){const r=this.stride;if(r%4==0){const a=new Uint32Array(t.buffer,e*r,i*r/4);new Uint32Array(this.buffer,s*r,i*r/4).set(a)}else{const a=new Uint8Array(t.buffer,e*r,i*r);new Uint8Array(this.buffer,s*r,i*r).set(a)}return this}get usedMemory(){return this.byteLength}dispose(){}}class d{constructor(t=null){this._stride=0,this._lastAligned=0,this._fields=new Map,t&&(this._stride=t.stride,t.fields.forEach(e=>this._fields.set(e[0],{...e[1],constructor:W(e[1].constructor)})))}vec2f(t,e){return this._appendField(t,l,e),this}vec2f64(t,e){return this._appendField(t,y,e),this}vec3f(t,e){return this._appendField(t,c,e),this}vec3f64(t,e){return this._appendField(t,F,e),this}vec4f(t,e){return this._appendField(t,o,e),this}vec4f64(t,e){return this._appendField(t,m,e),this}mat3f(t,e){return this._appendField(t,p,e),this}mat3f64(t,e){return this._appendField(t,g,e),this}mat4f(t,e){return this._appendField(t,_,e),this}mat4f64(t,e){return this._appendField(t,w,e),this}vec4u8(t,e){return this._appendField(t,A,e),this}f32(t,e){return this._appendField(t,f,e),this}f64(t,e){return this._appendField(t,b,e),this}u8(t,e){return this._appendField(t,v,e),this}u16(t,e){return this._appendField(t,T,e),this}i8(t,e){return this._appendField(t,B,e),this}vec2i8(t,e){return this._appendField(t,C,e),this}vec2i16(t,e){return this._appendField(t,L,e),this}vec2u8(t,e){return this._appendField(t,E,e),this}vec4u16(t,e){return this._appendField(t,$,e),this}u32(t,e){return this._appendField(t,M,e),this}_appendField(t,e,s){if(this._fields.has(t))return void Q(!1,`${t} already added to vertex buffer layout`);const i=e.ElementCount*u(e.ElementType),r=this._stride;this._stride+=i,this._fields.set(t,{size:i,constructor:e,offset:r,optional:s})}createBuffer(t){return new h(this,t)}createView(t){return new h(this,t)}clone(){const t=new d;return t._stride=this._stride,t._fields=new Map,this._fields.forEach((e,s)=>t._fields.set(s,e)),t.BufferType=this.BufferType,t}get stride(){if(this._lastAligned!==this._fields.size){let t=1;this._fields.forEach(e=>t=Math.max(t,u(e.constructor.ElementType))),this._stride=Math.floor((this._stride+t-1)/t)*t,this._lastAligned=this._fields.size}return this._stride}get fields(){return this._fields}}function Z(){return new d}class tt{constructor(t){this.fields=new Array,t.fields.forEach((e,s)=>{const i={...e,constructor:U(e.constructor)};this.fields.push([s,i])}),this.stride=t.stride}}const R=[f,l,c,o,p,_,b,y,F,m,g,w,v,E,z,A,T,H,I,$,M,O,V,k,B,C,D,G,J,L,K,N,S,j,q,P];function U(n){return`${n.ElementType}_${n.ElementCount}`}function W(n){return x.get(n)}const x=new Map;R.forEach(n=>x.set(U(n),n));export{d as G,Z as H,tt as I};
