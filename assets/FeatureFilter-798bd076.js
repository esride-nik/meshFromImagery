import{an as l,dH as u,s as d,bj as c,eP as _}from"./index-b516d057.js";import{j as y,v as f,t as w}from"./QueryEngine-ee1ccbba.js";import{b as I}from"./Query-071039d7.js";import{I as b}from"./Pipeline-39edfddb.js";import"./featureConversionUtils-09cf00ff.js";import"./OptimizedFeature-e90b69df.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./OptimizedGeometry-196224d4.js";import"./WhereClause-41137be1.js";import"./TimeOnly-879c5107.js";import"./UnknownTimeZone-a05df022.js";import"./projectionSupport-dcf335fc.js";import"./json-48e3ea08.js";import"./QueryEngineCapabilities-85c4f1d0.js";import"./quantizationUtils-17105106.js";import"./utils-f54bcc46.js";import"./heatmapUtils-7f42325f.js";import"./utils-1a995f8e.js";import"./basemapUtils-6ec10a55.js";import"./Basemap-8d62c69e.js";import"./loadAll-5e767cfa.js";import"./writeUtils-e226a8aa.js";import"./SnappingCandidate-970faec6.js";import"./FieldsIndex-e8db657f.js";import"./Scheduler-ff5943a4.js";import"./signal-51ed66f5.js";import"./debugFlags-9a30f077.js";import"./RenderState-1d6218ee.js";import"./FullTextSearch-12e0754c.js";import"./QuantizationParameters-f983cf8d.js";import"./UpdatingHandles-7949a657.js";import"./CircularArray-ef508845.js";import"./TileStore-c31b905a.js";import"./quickselect-bc0541de.js";import"./TileKey-4b1303ff.js";import"./TileInfoView-ce4d65fb.js";import"./ComputedAttributeStorage-bbcde1eb.js";import"./labelPoint-96433514.js";import"./definitions-5366d472.js";import"./visualVariablesUtils-b310591f.js";import"./color-a1c19855.js";import"./enums-f1a6a48a.js";import"./enums-b1d611e3.js";import"./enums-bdecffa2.js";import"./VertexElementDescriptor-2925c6af.js";import"./number-e491b09e.js";import"./ogcFeatureUtils-73278bb3.js";import"./geojson-573ee405.js";import"./date-294ce3fb.js";import"./clientSideDefaults-dfab1319.js";import"./defaultsJSON-59981e75.js";import"./query-351887b5.js";import"./pbfQueryUtils-b37a842c.js";import"./pbf-2651fe50.js";import"./queryZScale-d7a48772.js";import"./QueueProcessor-4b9d43d3.js";import"./StreamFeatureManager-3c1591f4.js";import"./createConnection-c6387383.js";import"./geohashUtils-77d8429b.js";const p=l.getLogger("esri.views.2d.layers.features.support.whereUtils"),g={getAttribute:(s,t)=>s.readAttribute(t)};async function T(s,t){try{const e=await u(s,t);if(!e.isStandardized){const i=new d("mapview - bad input","Unable to apply filter's definition expression, as expression is not standardized.",e);p.error(i)}return i=>{const r=i.readArcadeFeature();return e.testFeature(r,g)}}catch{return p.warn("mapview-bad-where-clause","Encountered an error when evaluating where clause",s),i=>!0}}const a=1,v=2;class Bt{constructor(t){this._geometryBounds=c(),this._idToVisibility=new Map,this._serviceInfo=t}get hash(){return this._hash}check(t){return this._applyFilter(t)}clear(){const t=this._resetAllHiddenIds();return this.update(),{show:t,hide:[]}}invalidate(){this._idToVisibility.forEach((t,e)=>{this._idToVisibility.set(e,0)})}setKnownIds(t){for(const e of t)this._idToVisibility.set(e,a)}setTrue(t){const e=[],i=[],r=new Set(t);return this._idToVisibility.forEach((m,o)=>{const h=!!(this._idToVisibility.get(o)&a),n=r.has(o);!h&&n?e.push(o):h&&!n&&i.push(o),this._idToVisibility.set(o,n?a|v:0)}),{show:e,hide:i}}createQuery(){const{geometry:t,spatialRel:e,where:i,timeExtent:r,objectIds:m}=this;return I.fromJSON({geometry:t,spatialRel:e,where:i,timeExtent:r,objectIds:m})}async update(t,e){this._hash=JSON.stringify(t);const i=await y(t,null,e);await Promise.all([this._setGeometryFilter(i),this._setIdFilter(i),this._setAttributeFilter(i),this._setTimeFilter(i)])}async _setAttributeFilter(t){if(!(t!=null&&t.where))return this._clause=null,void(this.where=null);this._clause=await T(t.where,this._serviceInfo.fieldsIndex),this.where=t.where}_setIdFilter(t){this._idsToShow=(t==null?void 0:t.objectIds)&&new Set(t.objectIds),this._idsToHide=(t==null?void 0:t.hiddenIds)&&new Set(t.hiddenIds),this.objectIds=t==null?void 0:t.objectIds}async _setGeometryFilter(t){if(!(t!=null&&t.geometry))return this._spatialQueryOperator=null,this.geometry=null,void(this.spatialRel=null);const e=t.geometry,i=t.spatialRel||"esriSpatialRelIntersects",r=await f(i,e,this._serviceInfo.geometryType,this._serviceInfo.hasZ,this._serviceInfo.hasM);_(this._geometryBounds,e),this._spatialQueryOperator=r,this.geometry=e,this.spatialRel=i}_setTimeFilter(t){if(this.timeExtent=this._timeOperator=null,t==null?void 0:t.timeExtent)if(this._serviceInfo.timeInfo)this.timeExtent=t.timeExtent,this._timeOperator=w(this._serviceInfo.timeInfo,t.timeExtent,b);else{const e=new d("feature-layer-view:time-filter-not-available","Unable to apply time filter, as layer doesn't have time metadata.",t.timeExtent);l.getLogger("esri.views.2d.layers.features.controllers.FeatureFilter").error(e)}}_applyFilter(t){return this._filterByGeometry(t)&&this._filterById(t)&&this._filterByTime(t)&&this._filterByExpression(t)}_filterByExpression(t){return!this.where||this._clause(t)}_filterById(t){var e,i;return(!((e=this._idsToHide)!=null&&e.size)||!this._idsToHide.has(t.getObjectId()))&&(!((i=this._idsToShow)!=null&&i.size)||this._idsToShow.has(t.getObjectId()))}_filterByGeometry(t){if(!this.geometry)return!0;const e=t.readHydratedGeometry();return!!e&&this._spatialQueryOperator(e)}_filterByTime(t){return this._timeOperator==null||this._timeOperator(t)}_resetAllHiddenIds(){const t=[];return this._idToVisibility.forEach((e,i)=>{e&a||(this._idToVisibility.set(i,a),t.push(i))}),t}}export{Bt as default};
