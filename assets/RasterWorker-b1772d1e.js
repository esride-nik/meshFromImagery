import{cJ as r,cK as c,cL as l,cM as m,M as i,cN as f,cO as u,B as p,cP as S,cQ as d,cR as x,cS as y,cT as O,cU as h,cV as N,cW as J,cX as P,cY as B,cZ as b,c_ as g}from"./index-b516d057.js";class w{convertVectorFieldData(e){const t=r.fromJSON(e.pixelBlock),s=c(t,e.type);return Promise.resolve(s!=null?s.toJSON():null)}computeStatisticsHistograms(e){const t=r.fromJSON(e.pixelBlock),s=l(t);return Promise.resolve(s)}async decode(e){const t=await m(e.data,e.options);return t&&t.toJSON()}symbolize(e){e.pixelBlock=r.fromJSON(e.pixelBlock),e.extent=e.extent?i.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(t!=null?t.toJSON():null)}async updateSymbolizer(e){var t;this.symbolizer=f.fromJSON(e.symbolizerJSON),e.histograms&&((t=this.symbolizer)==null?void 0:t.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=e.histograms)}async updateRasterFunction(e){this.rasterFunction=u(e.rasterFunctionJSON)}async process(e){var s;const t=this.rasterFunction.process({extent:i.fromJSON(e.extent),primaryPixelBlocks:e.primaryPixelBlocks.map(o=>o!=null?r.fromJSON(o):null),primaryPixelSizes:(s=e.primaryPixelSizes)==null?void 0:s.map(o=>o!=null?p.fromJSON(o):null),primaryRasterIds:e.primaryRasterIds});return t!=null?t.toJSON():null}stretch(e){const t=this.symbolizer.simpleStretch(r.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(t==null?void 0:t.toJSON())}estimateStatisticsHistograms(e){const t=S(r.fromJSON(e.srcPixelBlock));return Promise.resolve(t)}split(e){const t=d(r.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return t&&t.forEach((s,o)=>{t.set(o,s==null?void 0:s.toJSON())}),Promise.resolve(t)}async mosaicAndTransform(e){const t=e.srcPixelBlocks.map(n=>n?new r(n):null),s=x(t,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo,clipOffset:e.clipOffset,clipSize:e.clipSize});let o,a=s;return e.coefs&&(a=y(s,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation)),e.projectDirections&&e.gcsGrid&&(o=O(e.destDimension,e.gcsGrid),a=h(a,e.isUV?"vector-uv":"vector-magdir",o)),{pixelBlock:a==null?void 0:a.toJSON(),localNorthDirections:o}}async createFlowMesh(e,t){const s={data:new Float32Array(e.flowData.buffer),mask:new Uint8Array(e.flowData.maskBuffer),width:e.flowData.width,height:e.flowData.height},{vertexData:o,indexData:a}=await N(e.meshType,e.simulationSettings,s,t.signal);return{result:{vertexBuffer:o.buffer,indexBuffer:a.buffer},transferList:[o.buffer,a.buffer]}}async getProjectionOffsetGrid(e){const t=i.fromJSON(e.projectedExtent),s=i.fromJSON(e.srcBufferExtent);let o=null;e.datumTransformationSteps&&(o=new J({steps:e.datumTransformationSteps})),(e.includeGCSGrid||P(t.spatialReference,s.spatialReference,o))&&await B();const a=e.rasterTransform?b(e.rasterTransform):null;return g({...e,projectedExtent:t,srcBufferExtent:s,datumTransformation:o,rasterTransform:a})}}export{w as default};
