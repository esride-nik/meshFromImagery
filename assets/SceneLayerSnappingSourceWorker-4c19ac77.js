import{fD as l,f9 as m,d2 as g,d9 as E,d5 as _,a5 as w,a9 as y,f0 as v,aW as u,y as L,gF as V,iX as P,iY as b,f1 as h}from"./index-b516d057.js";import{W as C}from"./Octree-7cea9440.js";import{m as S}from"./edgeProcessing-82213448.js";import"./frustum-f9d53cdf.js";import"./InterleavedLayout-d76b0d59.js";import"./types-1305598a.js";import"./glUtil-ce5ee52b.js";import"./enums-bdecffa2.js";import"./VertexElementDescriptor-2925c6af.js";const j=1e3;function I(t,e,n){const o=E(),s=_(o);return l(s,s,t,.5),l(s,s,e,.5),o[3]=m(s,t),g(s,s,n),o}let f=class{constructor(){this._idToComponent=new Map,this._components=new C(t=>t.bounds),this._edges=new C(t=>t.bounds),this._tmpLineSegment=v(),this._tmpP1=u(),this._tmpP2=u(),this._tmpP3=u(),this.remoteClient=null}async fetchCandidates(t,e){await Promise.resolve(),L(e),await this._ensureEdgeLocations(t,e);const n=[];return this._edges.forEachNeighbor(o=>(this._addCandidates(t,o,n),n.length<j),t.bounds),{result:{candidates:n}}}async _ensureEdgeLocations(t,e){const n=[];if(this._components.forEachNeighbor(i=>{if(i.info==null){const{id:a,uid:d}=i;n.push({id:a,uid:d})}return!0},t.bounds),!n.length)return;const o={components:n},s=await this.remoteClient.invoke("fetchAllEdgeLocations",o,e??{});for(const i of s.components)this._setFetchEdgeLocations(i)}async add(t){const e=new p(t.id,t.bounds);return this._idToComponent.set(e.id,e),this._components.add([e]),{result:{}}}async remove(t){const e=this._idToComponent.get(t.id);if(e){const n=[];this._edges.forEachNeighbor(o=>(o.component===e&&n.push(o),!0),e.bounds),this._edges.remove(n),this._components.remove([e]),this._idToComponent.delete(e.id)}return{result:{}}}_setFetchEdgeLocations(t){const e=this._idToComponent.get(t.id);if(e==null||t.uid!==e.uid)return;const n=S.createView(t.locations),o=new Array(n.count),s=u(),i=u();for(let r=0;r<n.count;r++){n.position0.getVec(r,s),n.position1.getVec(r,i);const c=I(s,i,t.origin),x=new T(e,r,c);o[r]=x}this._edges.add(o);const{objectIds:a,origin:d}=t;e.info={locations:n,objectIds:a,origin:d}}_addCandidates(t,e,n){const{info:o}=e.component,{origin:s,objectIds:i}=o,a=o.locations,d=a.position0.getVec(e.index,this._tmpP1),r=a.position1.getVec(e.index,this._tmpP2);g(d,d,s),g(r,r,s);const c=i[a.componentIndex.get(e.index)];this._addEdgeCandidate(t,c,d,r,n),this._addVertexCandidate(t,c,d,n),this._addVertexCandidate(t,c,r,n)}_addEdgeCandidate(t,e,n,o,s){if(!t.returnEdge)return;const i=_(t.bounds),a=V(n,o,this._tmpLineSegment),d=P(a,i,this._tmpP3);b(t.bounds,d)&&s.push({type:"edge",objectId:e,target:h(d),distance:m(i,d),start:h(n),end:h(o)})}_addVertexCandidate(t,e,n,o){if(!t.returnVertex)return;const s=_(t.bounds);b(t.bounds,n)&&o.push({type:"vertex",objectId:e,target:h(n),distance:m(s,n)})}};f=w([y("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorker")],f);const U=f;class p{constructor(e,n){this.id=e,this.bounds=n,this.info=null,this.uid=++p.uid}}p.uid=0;class T{constructor(e,n,o){this.component=e,this.index=n,this.bounds=o}}export{U as default};
