import{h,g,k as i}from"./euclideanAreaMeasurementUtils-f9ba1710.js";import{f$ as $,f6 as q,aW as b,ah as d}from"./index-b516d057.js";import{l as s}from"./unitFormatUtils-67047561.js";import{geodesicArea as k}from"./geometryEngine-656a968c.js";import{w as m}from"./geodesicUtils-822c19ca.js";import{r as y}from"./automaticLengthMeasurementUtils-412e2f10.js";function M({hasZ:r,spatialReference:t,rings:e},o,u=0){const a=$(t);if(a==null)return!1;const p=r?n=>n:n=>q(R,n[0],n[1],u);for(const n of e){const f=[];for(const l of n){const c=[0,0,u];a(p(l),0,c,0),f.push(c)}o.push(f)}return!0}const R=b();function G(r){const{spatialReference:t}=r;return y(t,W,w,x,r)}function W(r){return s(Math.abs(m([r],"square-meters")[0]),"square-meters")}function w(r){try{return s(Math.abs(k(r,"square-meters")),"square-meters")}catch{return null}}function x(r){const t=[];return M(r,t)?s(Math.abs(m([{type:"polygon",rings:t,spatialReference:d.WGS84}],"square-meters")[0]),"square-meters"):null}function A(r,t,e=i()){if(t==="on-the-ground"){const o=G(r);return o??h(r,e)}return g(r,e)}function C(r,t=i()){return A(r,"on-the-ground",t)}export{A as o,C as u};
