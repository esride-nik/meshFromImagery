import{dm as T,ao as A,cd as D,eG as x,hQ as I,i0 as G,hj as M,gO as H,gH as s,gP as h,s as S,a5 as u,a6 as v,a9 as $,fJ as b}from"./index-b516d057.js";import{i as z,j as O}from"./MediaElementView-bf85e2c4.js";import{n as V,C,E as c,h as L,I as W,s as l}from"./RenderGeometry-5dbc1699.js";import{n as N}from"./LayerView3D-c03d44fc.js";import{N as U}from"./DefaultTechniqueConfiguration-b4dbe32f.js";import{g as j}from"./ImageMaterial-10c9471b.js";import{u as k}from"./LayerView-060b46d4.js";import{D as f}from"./enums-bdecffa2.js";import"./normalizeUtilsSync-7ead5aec.js";import"./vec3f32-bac7ea57.js";import"./ElevationProvider-abb53936.js";import"./dehydratedPoint-5a1dfed5.js";import"./hydratedFeatures-2365c307.js";import"./ViewingMode-5d7d590b.js";import"./interfaces-8918b36f.js";import"./weather-2eb64924.js";import"./RenderState-1d6218ee.js";import"./NestedMap-1b5db22e.js";import"./ShaderTechniqueConfiguration-2502462e.js";import"./frustum-f9d53cdf.js";import"./Material-5f4156ac.js";import"./VertexElementDescriptor-2925c6af.js";import"./VertexArrayObject-d19dab8d.js";import"./Texture-bcb6d63f.js";import"./contextUtils-81fda295.js";import"./FramebufferObject-123b7c8d.js";import"./Octree-7cea9440.js";import"./InterleavedLayout-d76b0d59.js";import"./types-1305598a.js";import"./OrderIndependentTransparency-755f7dcc.js";import"./floatRGBA-ca990bbb.js";import"./Intersector-2e1d9db3.js";import"./Intersector-fa865806.js";import"./boundedPlane-1da2f094.js";import"./verticalOffsetUtils-e5214af9.js";import"./orientedBoundingBox-67c5cd22.js";import"./glUtil-ce5ee52b.js";import"./Scheduler-ff5943a4.js";import"./signal-51ed66f5.js";import"./debugFlags-9a30f077.js";import"./heightModelInfoUtils-0dd2b6e4.js";import"./HeightModelInfo-b816d32b.js";import"./requestImageUtils-b142708c.js";import"./VerticalOffset.glsl-5743f98e.js";import"./UpdatingHandles-7949a657.js";let d=class extends N(k){constructor(){super(...arguments),this.type="media-3d",this.drapeSourceType=V.RasterImage,this.updatePolicy=C.ASYNC,this._uidToElement=new Map,this._renderedElements=new Map,this._lastDrapingExtent=null,this._update=T(async(e,t,r)=>{const i=await this._collectMediaElements(e,t,r);this._synchronizeRenderElements(i)},0)}initialize(){this._renderer=this.view.basemapTerrain.overlayManager.registerGeometryDrapeSource(this);const e=()=>this._updateWithLastDrapingExtent();this.addHandles([A(()=>this.view.basemapTerrain.overlayManager.unregisterDrapeSource(this)),D(()=>this.layer.effectiveSource,"change",e),D(()=>this.layer.effectiveSource,"refresh",e)]),this._updatingHandles.add(()=>this.suspended,e)}setDrapingExtent(e,t){this._lastDrapingExtent={overlays:e,spatialReference:t},this._updateWithLastDrapingExtent()}getHit(e){const t=this._uidToElement.get(e);return t?{type:"media",element:t,layer:this.layer}:null}_updateWithLastDrapingExtent(){if(this._lastDrapingExtent==null||this.suspended)return void(this._renderer&&this._synchronizeRenderElements(new Set));const{overlays:e,spatialReference:t}=this._lastDrapingExtent;this._updatingHandles.addPromise(this._update(e,t).catch(()=>{}))}async _collectMediaElements(e,t,r){const i=this.layer.effectiveSource;return i==null?new Set:new Set((await Promise.all(e.map(n=>i.queryElements(x(n.extent,t),{signal:r})))).flat())}_synchronizeRenderElements(e){this._synchronizeRenderElementsRemove(e),this._synchronizeRenderElementsAdd(e)}_synchronizeRenderElementsRemove(e){const t=new Set,r=[];this._renderedElements.forEach((i,n)=>{e.has(n)||(t.add(n),i.renderData!=null&&r.push(i.renderData.renderGeometry),this._removeElement(n,i))}),this._renderer.removeGeometries(r,c.REMOVE)}_synchronizeRenderElementsAdd(e){for(const t of e)this._renderedElements.has(t)||this._createRenderElement(t)}_removeElement(e,{renderData:t,handle:r}){this._destroyRenderData(t),this._renderedElements.delete(e),this._uidToElement.delete(e.uid),r.remove()}async _createRenderElement(e){const t=new z({spatialReference:this.view.spatialReference,element:e}),r={renderData:null,handle:I([this._updatingHandles.add(()=>e.opacity,i=>{r.renderData!=null&&r.renderData.material.setParameters({opacity:i})}),this._updatingHandles.add(()=>t.coords,()=>{r.renderData!=null?this._updateGeometry(t,r,r.renderData):this._initializeRenderData(t,r)}),this._updatingHandles.add(()=>e.content,()=>this._initializeRenderData(t,r)),G(t)])};this._renderedElements.set(e,r),this._uidToElement.set(e.uid,e),this._updatingHandles.addPromise(e.load().catch(()=>{})),this._initializeRenderData(t,r)}_initializeRenderData(e,t){const{coords:r,element:i}=e,{contentWidth:n,contentHeight:m}=i;if(r==null||i.content==null)return void(t.renderData=this._destroyRenderData(t.renderData));if(t.renderData!=null)return;const a=this._createTexture(i.content),_=a.load(this.view._stage.renderView.renderingContext);this.view._stage.add(a),M(_)&&this._updatingHandles.addPromise(_);const y=new j({initTextureTransparent:!0,textureId:a.id,opacity:i.opacity,transparent:!0,perspectiveInterpolation:!0}),E=this._getPositionAttributeArray(r),w=[0,0,1,0,1,1,0,1],R=this._getPerspectiveDivideAttributeArray(E,n,m),p=[0,1,2,0,2,3],P=new H(y,[[s.POSITION,new h(E,p,3,!0)],[s.UV0,new h(w,p,2,!0)],[s.PERSPECTIVEDIVIDE,new h(R,p,1,!0)]]),g=new L(P,{layerUid:this.layer.uid,graphicUid:i.uid});this._renderer.addGeometries([g],c.ADD),t.renderData={renderGeometry:g,texture:a,material:y}}_updateGeometry(e,t,r){const{coords:i,element:n}=e;if(i==null||n.content==null)return void(t.renderData=this._destroyRenderData(t.renderData));const m=this._getPositionAttributeArray(i);r.renderGeometry.geometry.setAttributeData(s.POSITION,m);const a=this._getPerspectiveDivideAttributeArray(m,n.contentWidth,n.contentHeight);r.renderGeometry.geometry.setAttributeData(s.PERSPECTIVEDIVIDE,a),this._renderer.modifyGeometries([r.renderGeometry],W.GEOMETRY)}_getPositionAttributeArray(e){const[t,r,i,n]=e.rings[0];return[t[0],t[1],l,n[0],n[1],l,i[0],i[1],l,r[0],r[1],l]}_getPerspectiveDivideAttributeArray(e,t,r){O(o,[0,0,t,0,t,r,0,r],[e[0],e[1],e[3],e[4],e[6],e[7],e[9],e[10]]);const i=o[6]/o[8]*t,n=o[7]/o[8]*r;return[1,1+i,1+i+n,1+n]}_destroyRenderData(e){if(e==null)return null;const t=e.texture;return t.unload(),this.view._stage.remove(t),this._renderer.removeGeometries([e.renderGeometry],c.REMOVE),null}_createTexture(e){const t=e instanceof HTMLImageElement?e.naturalWidth:e.width,r=e instanceof HTMLImageElement?e.naturalHeight:e.height;if("getFrame"in e)throw new S("media-layer-view-3d","animation is not supported");return new U(e,{wrap:{s:f.CLAMP_TO_EDGE,t:f.CLAMP_TO_EDGE},preMultiplyAlpha:!0,width:t,height:r,mipmap:!0,updateCallback:()=>this.view.basemapTerrain.overlayManager.setDrawTexturesDirty()})}get test(){const e=this;return{get numberOfElements(){return e._renderedElements.size}}}};u([v({readOnly:!0})],d.prototype,"type",void 0),u([v()],d.prototype,"layer",void 0),d=u([$("esri.views.3d.layers.MediaLayerView3D")],d);const o=b(),Oe=d;export{Oe as default};
