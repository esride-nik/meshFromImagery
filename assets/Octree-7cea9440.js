import{cj as st,bu as R,c$ as P,d0 as J,d1 as w,d2 as q,d3 as y,d4 as V,d5 as B,d6 as G,d7 as U,d8 as Q,d9 as E,da as it,aW as H,db as m}from"./index-b516d057.js";import{P as F}from"./frustum-f9d53cdf.js";class z{get bounds(){return this._root.bounds}get halfSize(){return this._root.halfSize}get root(){return this._root.node}get maximumObjectsPerNode(){return this._maximumObjectsPerNode}get maximumDepth(){return this._maximumDepth}get objectCount(){return this._objectCount}constructor(t,e){this.objectToBoundingSphere=t,this._maximumObjectsPerNode=10,this._maximumDepth=20,this._degenerateObjects=new Set,this._root=new d,this._objectCount=0,e&&(e.maximumObjectsPerNode!==void 0&&(this._maximumObjectsPerNode=e.maximumObjectsPerNode),e.maximumDepth!==void 0&&(this._maximumDepth=e.maximumDepth))}destroy(){this._degenerateObjects.clear(),d.clearPool(),W[0]=null,j.prune(),T.prune()}add(t,e=t.length){this._objectCount+=e,this._grow(t,e);const n=d.acquire();for(let o=0;o<e;o++){const s=t[o];this._isDegenerate(s)?this._degenerateObjects.add(s):(n.init(this._root),this._add(s,n))}d.release(n)}remove(t,e=null){this._objectCount-=t.length;const n=d.acquire();for(const o of t){const s=e??P(this.objectToBoundingSphere(o),lt);A(s[3])?(n.init(this._root),this._remove(o,s,n)):this._degenerateObjects.delete(o)}d.release(n),this._shrink()}update(t,e){if(!A(e[3])&&this._isDegenerate(t))return;const n=dt(t);this.remove(n,e),this.add(n)}forEachAlongRay(t,e,n){const o=J(t,e);this._forEachNode(this._root,s=>{if(!this._intersectsNode(o,s))return!1;const h=s.node;return h.terminals.forAll(a=>{this._intersectsObject(o,a)&&n(a)}),h.residents!==null&&h.residents.forAll(a=>{this._intersectsObject(o,a)&&n(a)}),!0})}forEachAlongRayWithVerticalOffset(t,e,n,o){const s=J(t,e);this._forEachNode(this._root,h=>{if(!this._intersectsNodeWithOffset(s,h,o))return!1;const a=h.node;return a.terminals.forAll(i=>{this._intersectsObjectWithOffset(s,i,o)&&n(i)}),a.residents!==null&&a.residents.forAll(i=>{this._intersectsObjectWithOffset(s,i,o)&&n(i)}),!0})}forEach(t){this._forEachNode(this._root,e=>{const n=e.node;return n.terminals.forAll(t),n.residents!==null&&n.residents.forAll(t),!0}),this._degenerateObjects.forEach(t)}forEachDegenerateObject(t){this._degenerateObjects.forEach(t)}findClosest(t,e,n,o=()=>!0,s=1/0){let h=1/0,a=1/0,i=null;const u=$(t,e),f=l=>{if(--s,!o(l))return;const _=this.objectToBoundingSphere(l);if(!F(n,_))return;const S=N(t,e,B(_)),M=S-_[3],c=S+_[3];M<h&&(h=M,a=c,i=l)};return this._forEachNodeDepthOrdered(this._root,l=>{if(s<=0||!F(n,l.bounds)||(w(g,u,l.halfSize),q(g,g,l.bounds),N(t,e,g)>a))return!1;const _=l.node;return _.terminals.forAll(S=>f(S)),_.residents!==null&&_.residents.forAll(S=>f(S)),!0},t,e),i}forEachInDepthRange(t,e,n,o,s,h,a){let i=-1/0,u=1/0;const f={setRange:c=>{n===z.DepthOrder.FRONT_TO_BACK?(i=Math.max(i,c.near),u=Math.min(u,c.far)):(i=Math.max(i,-c.far),u=Math.min(u,-c.near))}};f.setRange(o);const l=N(e,n,t),_=$(e,n),S=$(e,-n),M=c=>{if(!a(c))return;const x=this.objectToBoundingSphere(c),D=B(x),K=N(e,n,D)-l,nt=K-x[3],ot=K+x[3];nt>u||ot<i||!F(h,x)||s(c,f)};this._forEachNodeDepthOrdered(this._root,c=>{if(!F(h,c.bounds)||(w(g,_,c.halfSize),q(g,g,c.bounds),N(e,n,g)-l>u)||(w(g,S,c.halfSize),q(g,g,c.bounds),N(e,n,g)-l<i))return!1;const x=c.node;return x.terminals.forAll(D=>M(D)),x.residents!==null&&x.residents.forAll(D=>M(D)),!0},e,n)}forEachNode(t){this._forEachNode(this._root,e=>t(e.node,e.bounds,e.halfSize,e.depth))}forEachNeighbor(t,e){const n=y(e),o=B(e),s=i=>{const u=this.objectToBoundingSphere(i),f=y(u),l=n+f;return!(V(B(u),o)-l*l<=0)||t(i)};let h=!0;const a=i=>{h&&(h=s(i))};this._forEachNode(this._root,i=>{const u=y(i.bounds),f=n+u;if(V(B(i.bounds),o)-f*f>0)return!1;const l=i.node;return l.terminals.forAll(a),h&&l.residents!==null&&l.residents.forAll(a),h}),h&&this.forEachDegenerateObject(a)}_intersectsNode(t,e){return v(e.bounds,2*-e.halfSize,p),v(e.bounds,2*e.halfSize,b),G(t.origin,t.direction,p,b)}_intersectsNodeWithOffset(t,e,n){return v(e.bounds,2*-e.halfSize,p),v(e.bounds,2*e.halfSize,b),n.applyToMinMax(p,b),G(t.origin,t.direction,p,b)}_intersectsObject(t,e){const n=this.objectToBoundingSphere(e);return!(n[3]>0)||U(n,t)}_intersectsObjectWithOffset(t,e,n){const o=this.objectToBoundingSphere(e);return!(o[3]>0)||U(n.applyToBoundingSphere(o),t)}_forEachNode(t,e){let n=d.acquire().init(t);const o=[n];for(;o.length!==0;){if(n=o.pop(),e(n)&&!n.isLeaf())for(let s=0;s<n.node.children.length;s++)n.node.children[s]&&o.push(d.acquire().init(n).advance(s));d.release(n)}}_forEachNodeDepthOrdered(t,e,n,o=z.DepthOrder.FRONT_TO_BACK){let s=d.acquire().init(t);const h=[s];for(at(n,o,Z);h.length!==0;){if(s=h.pop(),e(s)&&!s.isLeaf())for(let a=7;a>=0;--a){const i=Z[a];s.node.children[i]&&h.push(d.acquire().init(s).advance(i))}d.release(s)}}_remove(t,e,n){j.clear();const o=n.advanceTo(e,(s,h)=>{j.push(s.node),j.push(h)})?n.node.terminals:n.node.residents;if(o.removeUnordered(t),o.length===0)for(let s=j.length-2;s>=0;s-=2){const h=j.data[s],a=j.data[s+1];if(!this._purge(h,a))break}}_nodeIsEmpty(t){if(t.terminals.length!==0)return!1;if(t.residents!==null)return t.residents.length===0;for(let e=0;e<t.children.length;e++)if(t.children[e])return!1;return!0}_purge(t,e){return e>=0&&(t.children[e]=null),!!this._nodeIsEmpty(t)&&(t.residents===null&&(t.residents=new R({shrink:!0})),!0)}_add(t,e){e.advanceTo(this.objectToBoundingSphere(t))?e.node.terminals.push(t):(e.node.residents.push(t),e.node.residents.length>this._maximumObjectsPerNode&&e.depth<this._maximumDepth&&this._split(e))}_split(t){const e=t.node.residents;t.node.residents=null;for(let n=0;n<e.length;n++){const o=d.acquire().init(t);this._add(e.at(n),o),d.release(o)}}_grow(t,e){if(e!==0&&(X(t,e,n=>this.objectToBoundingSphere(n),O),A(O[3])&&!this._fitsInsideTree(O)))if(this._nodeIsEmpty(this._root.node))P(O,this._root.bounds),this._root.halfSize=1.25*this._root.bounds[3],this._root.updateBoundsRadiusFromHalfSize();else{const n=this._rootBoundsForRootAsSubNode(O);this._placingRootViolatesMaxDepth(n)?this._rebuildTree(O,n):this._growRootAsSubNode(n),d.release(n)}}_rebuildTree(t,e){Q(k,e.bounds),k[3]=e.halfSize,X([t,k],2,o=>o,L);const n=d.acquire().init(this._root);this._root.initFrom(null,L,L[3]),this._root.increaseHalfSize(1.25),this._forEachNode(n,o=>(this.add(o.node.terminals.data,o.node.terminals.length),o.node.residents!==null&&this.add(o.node.residents.data,o.node.residents.length),!0)),d.release(n)}_placingRootViolatesMaxDepth(t){const e=Math.log(t.halfSize/this._root.halfSize)*Math.LOG2E;let n=0;return this._forEachNode(this._root,o=>(n=Math.max(n,o.depth),n+e<=this._maximumDepth)),n+e>this._maximumDepth}_rootBoundsForRootAsSubNode(t){const e=t[3],n=t;let o=-1/0;const s=this._root.bounds,h=this._root.halfSize;for(let i=0;i<3;i++){const u=s[i]-h-(n[i]-e),f=n[i]+e-(s[i]+h),l=Math.max(0,Math.ceil(u/(2*h))),_=Math.max(0,Math.ceil(f/(2*h)))+1,S=2**Math.ceil(Math.log(l+_)*Math.LOG2E);o=Math.max(o,S),C[i].min=l,C[i].max=_}for(let i=0;i<3;i++){let u=C[i].min,f=C[i].max;const l=(o-(u+f))/2;u+=Math.ceil(l),f+=Math.floor(l);const _=s[i]-h-u*h*2;I[i]=_+(f+u)*h}const a=o*h;return I[3]=a*et,d.acquire().initFrom(null,I,a,0)}_growRootAsSubNode(t){const e=this._root.node;Q(O,this._root.bounds),O[3]=this._root.halfSize,this._root.init(t),t.advanceTo(O,null,!0),t.node.children=e.children,t.node.residents=e.residents,t.node.terminals=e.terminals}_shrink(){for(;;){const t=this._findShrinkIndex();if(t===-1)break;this._root.advance(t),this._root.depth=0}}_findShrinkIndex(){if(this._root.node.terminals.length!==0||this._root.isLeaf())return-1;let t=null;const e=this._root.node.children;let n=0,o=0;for(;o<e.length&&t==null;)n=o++,t=e[n];for(;o<e.length;)if(e[o++])return-1;return n}_isDegenerate(t){return!A(this.objectToBoundingSphere(t)[3])}_fitsInsideTree(t){const e=this._root.bounds,n=this._root.halfSize;return t[3]<=n&&t[0]>=e[0]-n&&t[0]<=e[0]+n&&t[1]>=e[1]-n&&t[1]<=e[1]+n&&t[2]>=e[2]-n&&t[2]<=e[2]+n}toJSON(){const{maximumDepth:t,maximumObjectsPerNode:e,_objectCount:n}=this,o=this._nodeToJSON(this._root.node);return{maximumDepth:t,maximumObjectsPerNode:e,objectCount:n,root:{bounds:this._root.bounds,halfSize:this._root.halfSize,depth:this._root.depth,node:o}}}_nodeToJSON(t){var s,h;const e=t.children.map(a=>a?this._nodeToJSON(a):null),n=(s=t.residents)==null?void 0:s.map(a=>this.objectToBoundingSphere(a)),o=(h=t.terminals)==null?void 0:h.map(a=>this.objectToBoundingSphere(a));return{children:e,residents:n,terminals:o}}static fromJSON(t){const e=new z(n=>n,{maximumDepth:t.maximumDepth,maximumObjectsPerNode:t.maximumObjectsPerNode});return e._objectCount=t.objectCount,e._root.initFrom(t.root.node,t.root.bounds,t.root.halfSize,t.root.depth),e}}class d{constructor(){this.bounds=E(),this.halfSize=0,this.initFrom(null,null,0,0)}init(t){return this.initFrom(t.node,t.bounds,t.halfSize,t.depth)}initFrom(t,e,n,o=this.depth){return this.node=t??d.createEmptyNode(),e!=null&&P(e,this.bounds),this.halfSize=n,this.depth=o,this}increaseHalfSize(t){this.halfSize*=t,this.updateBoundsRadiusFromHalfSize()}updateBoundsRadiusFromHalfSize(){this.bounds[3]=this.halfSize*et}advance(t){let e=this.node.children[t];e||(e=d.createEmptyNode(),this.node.children[t]=e),this.node=e,this.halfSize/=2,this.depth++;const n=tt[t];return this.bounds[0]+=n[0]*this.halfSize,this.bounds[1]+=n[1]*this.halfSize,this.bounds[2]+=n[2]*this.halfSize,this.updateBoundsRadiusFromHalfSize(),this}advanceTo(t,e,n=!1){for(;;){if(this.isTerminalFor(t))return e&&e(this,-1),!0;if(this.isLeaf()){if(!n)return e&&e(this,-1),!1;this.node.residents=null}const o=this._childIndex(t);e&&e(this,o),this.advance(o)}}isLeaf(){return this.node.residents!=null}isTerminalFor(t){return t[3]>this.halfSize/2}_childIndex(t){const e=this.bounds;return(e[0]<t[0]?1:0)+(e[1]<t[1]?2:0)+(e[2]<t[2]?4:0)}static createEmptyNode(){return{children:[null,null,null,null,null,null,null,null],terminals:new R({shrink:!0}),residents:new R({shrink:!0})}}static acquire(){return d._pool.acquire()}static release(t){d._pool.release(t)}static clearPool(){d._pool.prune()}}function rt(r,t){r[0]=Math.min(r[0],t[0]-t[3]),r[1]=Math.min(r[1],t[1]-t[3]),r[2]=Math.min(r[2],t[2]-t[3])}function ht(r,t){r[0]=Math.max(r[0],t[0]+t[3]),r[1]=Math.max(r[1],t[1]+t[3]),r[2]=Math.max(r[2],t[2]+t[3])}function v(r,t,e){e[0]=r[0]+t,e[1]=r[1]+t,e[2]=r[2]+t}function X(r,t,e,n){if(t===1){const o=e(r[0]);P(o,n)}else{p[0]=1/0,p[1]=1/0,p[2]=1/0,b[0]=-1/0,b[1]=-1/0,b[2]=-1/0;for(let o=0;o<t;o++){const s=e(r[o]);A(s[3])&&(rt(p,s),ht(b,s))}it(n,p,b,.5),n[3]=Math.max(b[0]-p[0],b[1]-p[1],b[2]-p[2])/2}}function at(r,t,e){if(!T.length)for(let n=0;n<8;++n)T.push({index:0,distance:0});for(let n=0;n<8;++n){const o=tt[n];T.data[n].index=n,T.data[n].distance=N(r,t,o)}T.sort((n,o)=>n.distance-o.distance);for(let n=0;n<8;++n)e[n]=T.data[n].index}function $(r,t){let e,n=1/0;for(let o=0;o<8;++o){const s=N(r,t,Y[o]);s<n&&(n=s,e=Y[o])}return e}function N(r,t,e){return t*(r[0]*e[0]+r[1]*e[1]+r[2]*e[2])}function A(r){return!isNaN(r)&&r!==-1/0&&r!==1/0&&r>0}d._pool=new st(d),function(r){var t;(t=r.DepthOrder||(r.DepthOrder={}))[t.FRONT_TO_BACK=1]="FRONT_TO_BACK",t[t.BACK_TO_FRONT=-1]="BACK_TO_FRONT"}(z||(z={}));const tt=[m(-1,-1,-1),m(1,-1,-1),m(-1,1,-1),m(1,1,-1),m(-1,-1,1),m(1,-1,1),m(-1,1,1),m(1,1,1)],Y=[m(-1,-1,-1),m(-1,-1,1),m(-1,1,-1),m(-1,1,1),m(1,-1,-1),m(1,-1,1),m(1,1,-1),m(1,1,1)],et=Math.sqrt(3),W=[null];function dt(r){return W[0]=r,W}const I=E(),g=H(),p=H(),b=H(),j=new R,lt=E(),O=E(),k=E(),L=E(),C=[{min:0,max:0},{min:0,max:0},{min:0,max:0}],T=new R,Z=[0,0,0,0,0,0,0,0],ft=z;export{ft as W};
