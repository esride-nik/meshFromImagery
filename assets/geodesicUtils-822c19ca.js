import{s as I,g9 as J,D as Z,C as _,ga as b,gb as tt,gc as et,ah as nt,gd as st}from"./index-b516d057.js";function K(t){if(!t)return null;if(tt(t)&&t.wkid){const e=et[t.wkid];if(e)return e}const n=t.wkt2||t.wkt;if(n){const e=at(n);if(e)return e}return null}function at(t){const n=st.exec(t);if(!n||n.length!==2)return null;const e=n[1].split(",");if(!e||e.length<3)return null;const l=parseFloat(e[1]),s=parseFloat(e[2]);return isNaN(l)||isNaN(s)?null:{a:l,f:s===0?0:1/s}}function E(t){const n=K(t??nt.WGS84);if(it(n))return n;const e=n.a*(1-n.f);return Object.assign(n,{b:e,eSq:1-(e/n.a)**2,radius:(2*n.a+e)/3,densificationRatio:1e4/((2*n.a+e)/3)})}function it(t){return t!=null&&"b"in t&&"eSq"in t&&"radius"in t}function P(t,n,e){const{a:l,eSq:s}=E(e),a=Math.sqrt(s),r=Math.sin(n[1]*b),i=l*n[0]*b;let h;return s>0?h=l*((1-s)*(r/(1-s*(r*r))-1/(2*a)*Math.log((1-a*r)/(1+a*r))))*.5:h=l*r,t[0]=i,t[1]=h,t}function B(t){return K(t)!==null}function ht(t,n="square-meters"){if(t.some(r=>!B(r.spatialReference)))throw new I("geodesic-areas:invalid-spatial-reference","the input geometries spatial reference is not supported");const e=[];for(let r=0;r<t.length;r++){const i=t[r],h=i.spatialReference,{radius:c,densificationRatio:u}=E(h),o=c*u;e.push(ot(i,o))}const l=[],s=[0,0],a=[0,0];for(let r=0;r<e.length;r++){const{rings:i,spatialReference:h}=e[r];let c=0;for(let u=0;u<i.length;u++){const o=i[u];P(s,o[0],h),P(a,o[o.length-1],h);let M=a[0]*s[1]-s[0]*a[1];for(let d=0;d<o.length-1;d++)P(s,o[d+1],h),P(a,o[d],h),M+=a[0]*s[1]-s[0]*a[1];c+=M}c=J(c,"square-meters",n),l.push(c/-2)}return l}function ct(t,n="meters"){if(!t)throw new I("geodesic-lengths:invalid-geometries","the input geometries type is not supported");if(t.some(l=>!B(l.spatialReference)))throw new I("geodesic-lengths:invalid-spatial-reference","the input geometries spatial reference is not supported");const e=[];for(let l=0;l<t.length;l++){const s=t[l],{spatialReference:a}=s,r=s.type==="polyline"?s.paths:s.rings;let i=0;for(let h=0;h<r.length;h++){const c=r[h];let u=0;for(let o=1;o<c.length;o++){const M=c[o-1][0],d=c[o][0],y=c[o-1][1],g=c[o][1];if(y!==g||M!==d){const p=new L;Q(p,[M,y],[d,g],a),u+=p.distance}}i+=u}i=J(i,"meters",n),e.push(i)}return e}function ot(t,n){if(t.type!=="polyline"&&t.type!=="polygon")throw new I("geodesic-densify:invalid-geometry","the input geometry is neither polyline nor polygon");const{spatialReference:e}=t;if(!B(e))throw new I("geodesic-densify:invalid-spatial-reference","the input geometry spatial reference is not supported");const l=t.type==="polyline"?t.paths:t.rings,s=[],a=[0,0],r=new L;for(const i of l){const h=[];s.push(h),h.push([i[0][0],i[0][1]]);let c,u,o=i[0][0],M=i[0][1];for(let d=0;d<i.length-1;d++){if(c=i[d+1][0],u=i[d+1][1],o===c&&M===u)continue;const y=[o,M];Q(r,[o,M],[c,u],e);const{azimuth:g,distance:p}=r,v=p/n;if(v>1){for(let m=1;m<=v-1;m++)W(a,y,g,m*n,e),h.push(a.slice(0));W(a,y,g,(p+Math.floor(v-1)*n)/2,e),h.push(a.slice(0))}W(a,y,g,p,e),h.push(a.slice(0)),o=a[0],M=a[1]}}return t.type==="polyline"?new Z({paths:s,spatialReference:e}):new _({rings:s,spatialReference:e})}class L{constructor(n=0,e=void 0,l=void 0){this.distance=n,this.azimuth=e,this.reverseAzimuth=l}}function W(t,n,e,l,s){const a=n[0],r=n[1],i=a*b,h=r*b,c=(e??0)*b,{a:u,b:o,f:M}=E(s),d=Math.sin(c),y=Math.cos(c),g=(1-M)*Math.tan(h),p=1/Math.sqrt(1+g*g),v=g*p,m=Math.atan2(g,y),F=p*d,S=F*F,z=1-S,f=z*(u*u-o*o)/(o*o),$=1+f/16384*(4096+f*(f*(320-175*f)-768)),j=f/1024*(256+f*(f*(74-47*f)-128));let R,N,w,x,k=l/(o*$),q=2*Math.PI;for(;Math.abs(k-q)>1e-12;)w=Math.cos(2*m+k),R=Math.sin(k),N=Math.cos(k),x=j*R*(w+j/4*(N*(2*w*w-1)-j/6*w*(4*R*R-3)*(4*w*w-3))),q=k,k=l/(o*$)+x;const A=v*R-p*N*y,C=Math.atan2(v*N+p*R*y,(1-M)*Math.sqrt(S+A*A)),O=Math.atan2(R*d,p*N-v*R*y),G=M/16*z*(4+M*(4-3*z)),U=C/b,D=(i+(O-(1-G)*M*F*(k+G*R*(w+G*N*(2*w*w-1)))))/b;return t[0]=D,t[1]=U,t}function Q(t,n,e,l){const s=n[0]*b,a=n[1]*b,r=e[0]*b,i=e[1]*b,{a:h,b:c,f:u,radius:o}=E(l),M=r-s,d=Math.atan((1-u)*Math.tan(a)),y=Math.atan((1-u)*Math.tan(i)),g=Math.sin(d),p=Math.cos(d),v=Math.sin(y),m=Math.cos(y);let F,S,z,f,$,j,R,N,w,x,k=1e3,q=M;do{if(R=Math.sin(q),N=Math.cos(q),z=Math.sqrt(m*R*(m*R)+(p*v-g*m*N)*(p*v-g*m*N)),z===0)return t.distance=0,t.azimuth=void 0,t.reverseAzimuth=void 0,t;$=g*v+p*m*N,j=Math.atan2(z,$),w=p*m*R/z,S=1-w*w,f=$-2*g*v/S,isNaN(f)&&(f=0),x=u/16*S*(4+u*(4-3*S)),F=q,q=M+(1-x)*u*w*(j+x*z*(f+x*$*(2*f*f-1)))}while(Math.abs(q-F)>1e-12&&--k>0);if(k===0){const D=o,T=Math.acos(Math.sin(a)*Math.sin(i)+Math.cos(a)*Math.cos(i)*Math.cos(r-s))*D,H=r-s,V=Math.sin(H)*Math.cos(i),X=Math.cos(a)*Math.sin(i)-Math.sin(a)*Math.cos(i)*Math.cos(H),Y=Math.atan2(V,X);return t.azimuth=Y/b,t.distance=T,t.reverseAzimuth=void 0,t}const A=S*(h*h-c*c)/(c*c),C=A/1024*(256+A*(A*(74-47*A)-128)),O=c*(1+A/16384*(4096+A*(A*(320-175*A)-768)))*(j-C*z*(f+C/4*($*(2*f*f-1)-C/6*f*(4*z*z-3)*(4*f*f-3)))),G=Math.atan2(m*Math.sin(q),p*v-g*m*Math.cos(q)),U=Math.atan2(p*Math.sin(q),p*v*Math.cos(q)-g*m);return t.azimuth=G/b,t.distance=O,t.reverseAzimuth=U/b,t}export{B as M,L as R,Q as b,ot as v,ht as w,ct as y,W as z};
