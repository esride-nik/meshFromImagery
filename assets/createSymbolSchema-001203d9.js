import{n as V}from"./cimAnalyzer-ce1886a0.js";import{E as p,S as b}from"./enums-b1d611e3.js";import{f as h,_ as S,A as d}from"./MaterialKey-96278cae.js";import"./index-b516d057.js";import"./fontUtils-56b88a2f.js";import"./BidiEngine-9a40f2f4.js";import"./labelPoint-96433514.js";import"./OptimizedGeometry-196224d4.js";import"./GeometryUtils-984e8446.js";import"./enums-f1a6a48a.js";import"./alignmentUtils-ae955d28.js";import"./definitions-5366d472.js";import"./mat2d-d4af8487.js";import"./mat2df32-fb26a8c9.js";import"./vec2f32-eaf29605.js";import"./number-e491b09e.js";import"./Rect-ea14f53a.js";import"./callExpressionWithFeature-36423058.js";import"./quantizationUtils-17105106.js";import"./floatRGBA-ca990bbb.js";function y(e){var t;return e.type==="line-marker"?{type:"line-marker",color:(t=e.color)==null?void 0:t.toJSON(),placement:e.placement,style:e.style}:e.constructor.fromJSON(e.toJSON()).toJSON()}function u(e){return d(e)}function x(e,t,r=!1){if(!e)return null;switch(e.type){case"simple-fill":case"picture-fill":return g(e,t,r);case"simple-marker":case"picture-marker":return E(e,t,r);case"simple-line":return z(e,t,r);case"text":return k(e,t,r);case"label":return K(e,t,r);case"cim":return{type:"cim",rendererKey:t.vvFlags,data:e.data,maxVVSize:t.maxVVSize};case"CIMSymbolReference":return{type:"cim",rendererKey:t.vvFlags,data:e,maxVVSize:t.maxVVSize};case"web-style":return{...y(e),type:"web-style",hash:e.hash(),rendererKey:t.vvFlags,maxVVSize:t.maxVVSize};default:throw new Error(`symbol not supported ${e.type}`)}}function K(e,t,r){const a=e.toJSON(),o=h(p.LABEL,{...t,placement:a.labelPlacement});return{materialKey:r?u(o):o,hash:e.hash(),...a,labelPlacement:a.labelPlacement}}function g(e,t,r){const a=h(p.FILL,t),o=r?u(a):a,i=e.clone(),m=i.outline,s=S(t.symbologyType);s||(i.outline=null);const c={materialKey:o,hash:i.hash(),...y(i)};if(s)return c;const l=[];if(l.push(c),m){const n=h(p.LINE,{...t,isOutline:!0}),f={materialKey:r?u(n):n,hash:m.hash(),...y(m)};l.push(f)}return{type:"composite-symbol",layers:l,hash:l.reduce((n,f)=>f.hash+n,"")}}function z(e,t,r){const a=S(t.symbologyType)?b.DEFAULT:t.symbologyType,o=h(p.LINE,{...t,symbologyType:a}),i=r?u(o):o,m=e.clone(),s=m.marker;m.marker=null;const c=[];if(c.push({materialKey:i,hash:m.hash(),...y(m)}),s){const l=h(p.MARKER,t),n=r?u(l):l;s.color=s.color??m.color,c.push({materialKey:n,hash:s.hash(),lineWidth:m.width,...y(s)})}return{type:"composite-symbol",layers:c,hash:c.reduce((l,n)=>n.hash+l,"")}}function E(e,t,r){if(e.type==="simple-marker"&&(e.style==="path"||e.outline&&e.outline.style!=="solid"&&e.outline.style!=="none"))return x({type:"CIMSymbolReference",symbol:V.fromSimpleMarker(e)},t,r);const a=h(p.MARKER,t),o=r?u(a):a,i=y(e);return{materialKey:o,hash:e.hash(),...i,angle:e.angle,maxVVSize:t.maxVVSize}}function k(e,t,r){const a=h(p.TEXT,t),o=r?u(a):a,i=y(e);return{materialKey:o,hash:e.hash(),...i,angle:e.angle,maxVVSize:t.maxVVSize}}export{x as createSymbolSchema};
